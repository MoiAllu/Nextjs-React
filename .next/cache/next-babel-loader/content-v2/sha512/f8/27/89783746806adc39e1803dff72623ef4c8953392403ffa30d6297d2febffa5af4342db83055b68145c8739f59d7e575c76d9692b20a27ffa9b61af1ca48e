{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aliabbasi/Documents/NextJS react/pages/[meetupId]/index.js\";\nimport NewDetailPage from \"../../components/meetups/newDetailPage\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\n\nrequire(\"dotenv\").config();\n\nconst Key = process.env.PASSWORD;\n\nconst newDescription = props => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.CarXData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.CarXData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewDetailPage, {\n      image: props.CarXData.image,\n      title: props.CarXData.title,\n      description: props.CarXData.description,\n      address: props.CarXData.address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(`mongodb+srv://AliQans:${Key}@cluster0.r2ac1.mongodb.net/carX?retryWrites=true&w=majority`);\n  const db = client.db();\n  const carsCollection = db.collection(\"carX\");\n  const carX_Dettail = await carsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: \"blocking\",\n    paths: carX_Dettail.map(Genrated => ({\n      params: {\n        meetupId: Genrated._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const contextPath = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://AliQans:lawaA123@cluster0.r2ac1.mongodb.net/carX?retryWrites=true&w=majority\");\n  const db = client.db();\n  const carsCollection = db.collection(\"carX\");\n  const selectedCar = await carsCollection.findOne({\n    _id: ObjectId(contextPath)\n  });\n  client.close();\n  console.log(contextPath);\n  return {\n    props: {\n      CarXData: {\n        id: selectedCar._id.toString(),\n        image: selectedCar.image,\n        title: selectedCar.title,\n        address: selectedCar.address,\n        description: selectedCar.description\n      }\n    },\n    revalidate: 1\n  };\n}\nexport default newDescription;","map":{"version":3,"sources":["/Users/aliabbasi/Documents/NextJS react/pages/[meetupId]/index.js"],"names":["NewDetailPage","MongoClient","ObjectId","Fragment","Head","require","config","Key","process","env","PASSWORD","newDescription","props","CarXData","title","description","image","address","getStaticPaths","client","connect","db","carsCollection","collection","carX_Dettail","find","_id","toArray","close","fallback","paths","map","Genrated","params","meetupId","toString","getStaticProps","context","contextPath","selectedCar","findOne","console","log","id","revalidate"],"mappings":"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","sourcesContent":["import NewDetailPage from \"../../components/meetups/newDetailPage\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\nrequire(\"dotenv\").config();\nconst Key=process.env.PASSWORD;\nconst newDescription = (props) => {\n  return (\n    <Fragment>\n      <Head>\n        <title>{props.CarXData.title}</title>\n        <meta name=\"description\" content={props.CarXData.description} />\n      </Head>\n      <NewDetailPage\n        image={props.CarXData.image}\n        title={props.CarXData.title}\n        description={props.CarXData.description}\n        address={props.CarXData.address}\n      />\n    </Fragment>\n  );\n};\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    `mongodb+srv://AliQans:${Key}@cluster0.r2ac1.mongodb.net/carX?retryWrites=true&w=majority`\n  );\n  const db = client.db();\n  const carsCollection = db.collection(\"carX\");\n  const carX_Dettail = await carsCollection.find({}, { _id: 1 }).toArray();\n  client.close();\n  return {\n    fallback: \"blocking\",\n    paths: carX_Dettail.map((Genrated) => ({\n      params: { meetupId: Genrated._id.toString() },\n    })),\n  };\n}\nexport async function getStaticProps(context) {\n  const contextPath = context.params.meetupId;\n  const client = await MongoClient.connect(\n    \"mongodb+srv://AliQans:lawaA123@cluster0.r2ac1.mongodb.net/carX?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n  const carsCollection = db.collection(\"carX\");\n  const selectedCar = await carsCollection.findOne({\n    _id: ObjectId(contextPath),\n  });\n  client.close();\n  console.log(contextPath);\n  return {\n    props: {\n      CarXData: {\n        id: selectedCar._id.toString(),\n        image: selectedCar.image,\n        title: selectedCar.title,\n        address: selectedCar.address,\n        description: selectedCar.description,\n      },\n    },\n    revalidate: 1,\n  };\n}\nexport default newDescription;\n"]},"metadata":{},"sourceType":"module"}